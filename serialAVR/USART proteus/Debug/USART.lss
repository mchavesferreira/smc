
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001e6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3a  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d9  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000466  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b9  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002139  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "def_principais.h"
#include "USART.h"

//-------------------------------------------------------------------------
int main()
{   unsigned char digitos[tam_vetor];	//declaração da variável para armazenagem dos digitos
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x8>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	unsigned int valor=0;
	USART_Inic(MYUBRR);
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 89 00 	call	0x112	; 0x112 <USART_Inic>
	
	escreve_USART("teste ");   // envia texto para serial
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	0e 94 9e 00 	call	0x13c	; 0x13c <escreve_USART>
		USART_Transmite(13);   // codigo ascii pula linha
  b4:	8d e0       	ldi	r24, 0x0D	; 13
  b6:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Transmite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	83 ec       	ldi	r24, 0xC3	; 195
  be:	99 e0       	ldi	r25, 0x09	; 9
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x34>
  ca:	00 00       	nop
#include "USART.h"

//-------------------------------------------------------------------------
int main()
{   unsigned char digitos[tam_vetor];	//declaração da variável para armazenagem dos digitos
	unsigned int valor=0;
  cc:	00 e0       	ldi	r16, 0x00	; 0
  ce:	10 e0       	ldi	r17, 0x00	; 0
		USART_Transmite(13);   // codigo ascii pula linha
		_delay_ms(200);  // aguarda intervalo de tempo
	
	while(1)
	{
		valor++;
  d0:	0f 5f       	subi	r16, 0xFF	; 255
  d2:	1f 4f       	sbci	r17, 0xFF	; 255
		ident_num(valor,digitos);  // separa casas do numero 
  d4:	be 01       	movw	r22, r28
  d6:	6f 5f       	subi	r22, 0xFF	; 255
  d8:	7f 4f       	sbci	r23, 0xFF	; 255
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 ad 00 	call	0x15a	; 0x15a <ident_num>
	    USART_Transmite(digitos[3]);
  e0:	8c 81       	ldd	r24, Y+4	; 0x04
  e2:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Transmite>
		USART_Transmite(digitos[2]);
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Transmite>
		USART_Transmite(digitos[1]);
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Transmite>
	    USART_Transmite(digitos[0]);
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Transmite>
		USART_Transmite(13);   // codigo ascii pula linha
  f8:	8d e0       	ldi	r24, 0x0D	; 13
  fa:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Transmite>
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	83 ec       	ldi	r24, 0xC3	; 195
 102:	99 e0       	ldi	r25, 0x09	; 9
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x6e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x78>
 10e:	00 00       	nop
 110:	df cf       	rjmp	.-66     	; 0xd0 <main+0x3a>

00000112 <USART_Inic>:
}
//---------------------------------------------------------------------------
void escreve_USART_Flash(const char *c)	//escreve String (Flash)
{
   for (;pgm_read_byte(&(*c))!=0;c++) USART_Transmite(pgm_read_byte(&(*c)));
}
 112:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 116:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 11a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 11e:	88 e1       	ldi	r24, 0x18	; 24
 120:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 12a:	08 95       	ret

0000012c <USART_Transmite>:
 12c:	e0 ec       	ldi	r30, 0xC0	; 192
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	90 81       	ld	r25, Z
 132:	95 ff       	sbrs	r25, 5
 134:	fd cf       	rjmp	.-6      	; 0x130 <USART_Transmite+0x4>
 136:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 13a:	08 95       	ret

0000013c <escreve_USART>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	88 81       	ld	r24, Y
 144:	88 23       	and	r24, r24
 146:	31 f0       	breq	.+12     	; 0x154 <escreve_USART+0x18>
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Transmite>
 14e:	89 91       	ld	r24, Y+
 150:	81 11       	cpse	r24, r1
 152:	fb cf       	rjmp	.-10     	; 0x14a <escreve_USART+0xe>
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <ident_num>:
//---------------------------------------------------------------------------	
//Conversão de um número em seus digitos individuais
//---------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{   
 15a:	ac 01       	movw	r20, r24
 15c:	fb 01       	movw	r30, r22
 15e:	db 01       	movw	r26, r22
 160:	9b 01       	movw	r18, r22
 162:	2b 5f       	subi	r18, 0xFB	; 251
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 	unsigned char n;

	for(n=0; n<tam_vetor; n++)
		disp[n] = 0 + conv_ascii;	//limpa vetor para armazenagem dos digitos 
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	8d 93       	st	X+, r24
//---------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{   
 	unsigned char n;

	for(n=0; n<tam_vetor; n++)
 16a:	a2 17       	cp	r26, r18
 16c:	b3 07       	cpc	r27, r19
 16e:	e1 f7       	brne	.-8      	; 0x168 <ident_num+0xe>
		disp[n] = 0 + conv_ascii;	//limpa vetor para armazenagem dos digitos 

	do
	{
       *disp = (valor%10) + conv_ascii;	//pega o resto da divisao por 10 
 170:	9a 01       	movw	r18, r20
 172:	ad ec       	ldi	r26, 0xCD	; 205
 174:	bc ec       	ldi	r27, 0xCC	; 204
 176:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__umulhisi3>
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	9c 01       	movw	r18, r24
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	82 0f       	add	r24, r18
 19a:	93 1f       	adc	r25, r19
 19c:	9a 01       	movw	r18, r20
 19e:	28 1b       	sub	r18, r24
 1a0:	39 0b       	sbc	r19, r25
 1a2:	c9 01       	movw	r24, r18
 1a4:	80 5d       	subi	r24, 0xD0	; 208
 1a6:	81 93       	st	Z+, r24
	   valor /=10;		//pega o inteiro da divisão por 10
 1a8:	9a 01       	movw	r18, r20
 1aa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__umulhisi3>
 1ae:	ac 01       	movw	r20, r24
 1b0:	56 95       	lsr	r21
 1b2:	47 95       	ror	r20
 1b4:	56 95       	lsr	r21
 1b6:	47 95       	ror	r20
 1b8:	56 95       	lsr	r21
 1ba:	47 95       	ror	r20
	   disp++;

	}while (valor!=0);
 1bc:	41 15       	cp	r20, r1
 1be:	51 05       	cpc	r21, r1
 1c0:	b9 f6       	brne	.-82     	; 0x170 <ident_num+0x16>
}
 1c2:	08 95       	ret

000001c4 <__umulhisi3>:
 1c4:	a2 9f       	mul	r26, r18
 1c6:	b0 01       	movw	r22, r0
 1c8:	b3 9f       	mul	r27, r19
 1ca:	c0 01       	movw	r24, r0
 1cc:	a3 9f       	mul	r26, r19
 1ce:	70 0d       	add	r23, r0
 1d0:	81 1d       	adc	r24, r1
 1d2:	11 24       	eor	r1, r1
 1d4:	91 1d       	adc	r25, r1
 1d6:	b2 9f       	mul	r27, r18
 1d8:	70 0d       	add	r23, r0
 1da:	81 1d       	adc	r24, r1
 1dc:	11 24       	eor	r1, r1
 1de:	91 1d       	adc	r25, r1
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
